

<project name="Strategy" default="compile">
	<!-- references .jar to compile python code -->
	<taskdef resource="pyAntTasks.properties"/>
	<!-- allows for antcontrib references (like try catch...)-->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
		
	<!-- utilities -->
	
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##                                           ## -->
	<!-- ##                  Utilities                ## -->
	<!-- ##  (helper properties and functionality)    ## -->		
	<!-- ##                                           ## -->
	<!-- ############################################### -->
	<!-- ############################################### -->
	
		<!-- time stamp -->
		<tstamp>
			<format property="time.stamp" pattern="[MM][dd][yyyy][hh][mm][ss][aa]" />
		</tstamp>
	
		<!-- ############################################### -->
		<!-- ############################################### -->
		<!-- ##                                           ## -->
		<!-- ##                  Git Commands             ## -->
		<!-- ##      Allows for pull/push/clone for git   ## -->		
		<!-- ##      repositories                         ## -->
		<!-- ##                                           ## -->
		<!-- ############################################### -->
		<!-- ############################################### -->
	
			<!-- git commands -->
			<macrodef name="git">
				<attribute name="command" />
				<attribute name="dir" default="" />
				<element name="args" optional="true" />
				<sequential>
					<echo message="git @{command}" />
					<exec executable="git" dir="@{dir}">
						<arg value="@{command}"/>
						<args/>
					</exec>
				</sequential>
			</macrodef>
			
			<macrodef name="git-clone-pull">
				<attribute name="repository" />
				<attribute name="dest" />
				<sequential>
					<git command="clone">
						<args>
							<arg value="@{repository}" />
							<arg value="@{dest}" />
						</args>
					</git>
					<git command="pull" dir="@{dest}" />
				</sequential>
			</macrodef>
	
	<!-- reference this url [tlrobinson.net/blog/2008/11/ant-tasks-for-git]-->
	
	<!--
	<git command="clone">
		<args>
			<arg value="git://github.com/reponame.git" />
			<arg value="reponame" />
		</args>
	</git>
	-->
	
	<!--
	<git command="pull" dir="repository_path" />
	-->
	
		<!-- end // git commands -->
	
	
	<!-- end // utilities -->
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##                                           ## -->
	<!-- ##        Logs and logging filesystem        ## -->
	<!-- ##  (provides the file structure needed to   ## -->
	<!-- ##   maintain the logging and output)        ## -->
	<!-- ##                                           ## -->		
	<!-- ############################################### -->
	<!-- ############################################### -->
	
	
	<!-- logs -->
	
		<!-- directory -->
		<property name="log.dir" value="build_logs"/>
			
			<!-- files -->				
	
				<!-- build logs -->
						<property name="build.log.file" value="${log.dir}/tests_executed.txt"/>
					<!-- end // build logs -->
				<!-- global repository logs -->
						<property name="global.repository.log.file" value="${log.dir}/repository_transactions.txt"/>
				<!-- end // build logs -->

			<!-- end // files -->
			
			<!-- sub directories -->
				
				<!-- build specific (creates this individually for each build) -->	
					<property name="build.dir" value="${log.dir}/build_${time.stamp}" />
					
					<!-- files system -->
	
						<!-- targets executed -->
								<property name="target.log.file" value="${build.dir}/targets_executed.txt"/>	
						<!-- end // targets executed -->
						
						<!-- targets executed -->
								<property name="error.log.file" value="${build.dir}/errors.txt"/>	
						<!-- end // targets executed -->
							
						<!-- sub directories -->	
						
							<!-- tests -->
							<property name="test.dir" value="${build.dir}/tests"/>
								<!-- files -->				
									<!-- tests executed & results -->
										<property name="test.log.file" value="${test.dir}/test_transactions.txt"/>
									<!-- end // tests executed & results -->
								<!-- end // files -->
							<!-- end // tests -->
				
							<!-- repository -->
							<property name="repository.dir" value="${build.dir}/repository"/>
								<!-- files -->				
									<!-- repository transactions -->
										<property name="repository.log.file" value="${repository.dir}/repository_transactions.txt"/>
									<!-- end // repository transactions -->
								<!-- end // files -->
							<!-- end // repository -->
	
							<!-- html -->
							<property name="html.dir" value="${build.dir}/html"/>
								<!-- files -->				
									<!-- html output -->
										<property name="html.log.file" value="${html.dir}/html_output.html"/>
									<!-- end // html output  -->
								<!-- end // files -->	
							<!-- end // html -->
	
						<!-- end // sub directories -->	
							
					<!-- end // files system -->
	
				<!-- end // build specific (creates this individually for each build) -->	
			
			<!-- end // sub directories -->
		
		<!-- end // directory -->
	
	<!-- end // log -->
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##  Uses the file system variables above     ## -->
	<!-- ##  And creates the necessary structure      ## -->
	<!-- ##  to execute and log actions for automated ## -->
	<!-- ##  builds                                   ## -->	
	<!-- ############################################### -->
	<!-- ############################################### -->
	
	
	<target name="create_file_system">
		<!-- creates all directories necessary for file system -->
		
		<!-- base directory to hold all tests -->
		
		<mkdir dir="${log.dir}" />
			
			<!-- holds individual builds -->
			
			<mkdir dir="${build.dir}" />
			
			<!-- metrics being measured will be output to 
					 the following directories-->
				
				<mkdir dir="${test.dir}" />
				
				<mkdir dir="${repository.dir}" />
				
				<mkdir dir="${html.dir}" />
	</target>
	
	<!-- This will only execute once the create_file_system 
		 target has been executed and verified -->
	
	<target name="create_files" depends="create_file_system">
		
		<!-- creates all individual files within file structure -->
		
		<!-- log.dir -->
			
			<!-- logs all builds -->
			<touch file="${build.log.file}" datetime="now"/>
			
			<!-- logs all repository transactions -->
			<touch file="${global.repository.log.file}" datetime="now"/>
		
				<!-- build.dir -->
					<!-- logs all the targets executed per build -->
					<touch file="${target.log.file}" datetime="now"/>
					
					<!-- logs all the errors -->
					<touch file="${error.log.file}" datetime="now"/>
		
						<!-- test.dir -->
								<!-- logs all the targets executed per build -->
								<touch file="${target.log.file}" datetime="now"/>
						<!-- end // test.dir -->
						
						<!-- repository.dir -->
								<!-- logs all the targets executed per build -->
								<touch file="${repository.log.file}" datetime="now"/>
						<!-- end // repository.dir -->
						
						<!-- html.dir -->
								<!-- logs all the targets executed per build -->
								<touch file="${html.log.file}" datetime="now"/>
						<!-- end // html.dir -->
		
				<!-- end // build.dir -->
		<!-- end // log.dir -->
	</target>
	
	
	
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##                                           ## -->
	<!-- ##  Write the all build metrics out to an    ## -->
	<!-- ##  html file                                ## -->
	<!-- ##                                           ## -->	
	<!-- ############################################### -->
	<!-- ############################################### -->
	
	
	<target name="create_html_output" depends="create_file_system">
		<echo file="${html.log.file}" append="false" message="
			&lt;html&gt;
				&lt;head&gt;
				&lt;/head&gt;
				&lt;body&gt;
		" />
		<echo file="${html.log.file}" append="true" message="
				&lt;h1&gt;Testing Testing 123&lt;/h1&gt;
		" />
		<echo file="${html.log.file}" append="true" message="
			&lt;/body&gt;
			&lt;/html&gt;
		" />

		<!-- templating example http://www.javalobby.org/articles/ant-preprocessor/ -->
	</target>
	
	<!--<target name="compile" depends="create_html_output">-->	
	<target name="compile" depends="create_files">	
		<!-- before these commands will work, you need to set a trusted ssh key and upload it to github -->
		
		<!-- to generate a key ... do this... [ssh-keygen -t rsa -C "your_email_address@example.com"] 
		     do not ovveride an existing one, cause it will jackup any other connections you have....-->
		
		<!-- once that is complete run this command [clip < ~/.ssh/id_rsa.pub] to copy it to your clipboard... -->
		
		<!-- go to your account on github, - account settings - ssh keys ... add a key -->
		
		<!-- try catch is specific to ant-contrib [http://ant-contrib.sourceforge.net/tasks/tasks/] -->
		<trycatch>
			<try>
				<git command="add">	
					<args>
						<arg value="-A" />
					</args>
				</git>
			</try>
			<catch>
				<echo>git [add -A] failed</echo>	
			</catch>
		</trycatch>
		<trycatch>
		<try>
			<git command="commit">
				<args>
					<arg value="-m" />
					<arg value="'BUILD NO. [@{time.stamp}]'" />
				</args>
			</git>
		</try>
		<catch>
			<echo>git [commit -m] failed</echo>	
		</catch>
		</trycatch>
		<trycatch>
		<try>
			<git command="push">
				<args>
					<arg value="origin" />
					<arg value="master" />
				</args>
			</git>
		</try>
		<catch>
			<echo>git [push origin master] failed</echo>	
		</catch>
		</trycatch>
		<!--<git command="commit -a -allow-empty-message -m ''" /> note* allow-empty message needs two mid lines(-)*-->
				
		<!--<py-compile dir="${src.dir}" pythonpath="${src.dir}" optimize="0"/>-->
			
	</target>

</project>