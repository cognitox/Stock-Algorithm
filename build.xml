<project name="Strategy" default="display.commands">
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: Shows All Commands                      
         - - - - - - - - - - - - - - - - - -->
    <target name="display.commands">
    	<echo>
    		Menu :
    		--------------------------
    		ant commands : 
    		--------------------------
    		[ant commit]
    		[ant tests]
    		[ant origin]
    		[ant test-and-push]
    		[ant analysis]
    	</echo>
    </target>		
	<!-- needs to pull, if other developers are using this repository! -->
	<!-- currently doesn't pull anything-->
    <target name="commit">
    	<antcall target="git-commit-changes" />    	
	</target>
    <target name="tests">
    	 <antcall target="create_file_system" />
    	 <antcall target="run.all.tests" />	
	</target>
	<target name="origin">
	    	 <antcall target="git-push-to-origin" />
	</target>
	<target name="test-and-push">
   	 	<antcall target="create_file_system" />
   	 	<antcall target="run.all.tests" />
   	    <antcall target="git-push-to-origin" />
		<antcall target="create_html_output" />
	</target>
	<!-- will only analyze existing builds... -->
	<target name="analysis">
		<antcall target="create_html_output" />
	</target>

	
	
	
	
	
	<!-- references .jar to compile python code -->
	<taskdef resource="pyAntTasks.properties"/>
	<!-- allows for antcontrib references (like try catch...)-->
	<!-- [http://ant-contrib.sourceforge.net/tasks/tasks/] -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
		
	<!-- utilities -->
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##                                           ## -->
	<!-- ##                  Utilities                ## -->
	<!-- ##  (helper properties and functionality)    ## -->		
	<!-- ##                                           ## -->
	<!-- ############################################### -->
	<!-- ############################################### -->
	
		<!-- time stamp -->
		<tstamp>
			<format property="time.stamp" pattern="[MM][dd][yyyy][hh][mm][ss][aa]" />
		</tstamp>
	
		<!-- ############################################### -->
		<!-- ############################################### -->
		<!-- ##                                           ## -->
		<!-- ##                  Git Commands             ## -->
		<!-- ##      Allows for pull/push/clone for git   ## -->		
		<!-- ##      repositories                         ## -->
		<!-- ##                                           ## -->
		<!-- ############################################### -->
		<!-- ############################################### -->
		<!-- 
		Before these commands will work, you need to set a
		trusted ssh key and upload it to github.
		 
		To generate a key ... [ssh-keygen -t rsa -C 
		"your_email_address@example.com"] do not ovveride 
		an existing one, cause it will jackup any other 
		connections you have.... once that is complete 
		copy go to your account on github, - account 
		settings - ssh keys ... add a key.
		
		Also the prerequisites for this is you must have an
		git remote set for origin, and you need to specify
		the ssh version of the git url, to bypass password 
		authentication.
		-->
		
		<!-- reference this url [tlrobinson.net/blog/2008/11/ant-tasks-for-git]-->
				
			<!-- git commands -->
			<macrodef name="git">
				<attribute name="command" />
				<attribute name="dir" default="" />
				<element name="args" optional="true" />
				<sequential>
					<echo message="git @{command}" />
					<exec executable="git" dir="@{dir}">
						<arg value="@{command}"/>
						<args/>
					</exec>
				</sequential>
			</macrodef>
			
			<macrodef name="git-clone-pull">
				<attribute name="repository" />
				<attribute name="dest" />
				<sequential>
					<git command="clone">
						<args>
							<arg value="@{repository}" />
							<arg value="@{dest}" />
						</args>
					</git>
					<git command="pull" dir="@{dest}" />
				</sequential>
			</macrodef>
			
			<!-- ############################################### -->
			<!-- ############################################### -->
			<!-- ##                                           ## -->
			<!-- ## Adds all files changes in this repository ## -->
			<!-- ##                                           ## -->
			<!-- ############################################### -->
			<!-- ############################################### -->
			
				<target name="git-add-all-modified-files">
					<trycatch>
						<try>
							<git command="add">	
								<args>
									<arg value="-A" />
								</args>
							</git>
						</try>
						<catch>
							<echo>git [add -A] failed</echo>	
						</catch>
					</trycatch>
				</target>
			
			<!-- ############################################### -->
			<!-- ############################################### -->
			<!-- ##                                           ## -->
			<!-- ## Commits changes for modified files added  ## -->
			<!-- ##                                           ## -->
			<!-- ############################################### -->
			<!-- ############################################### -->
			
				<target name="git-commit-changes" depends="git-add-all-modified-files">
					<trycatch>
						<try>
							<git command="commit">
								<args>
									<arg value="-m" />
									<arg value="'BUILD NO. [@{time.stamp}]'" />
								</args>
							</git>
						</try>
						<catch>
							<echo>git [commit -m] failed</echo>	
						</catch>
					</trycatch>
				</target>
			
			<!-- ############################################### -->
			<!-- ############################################### -->
			<!-- ##                                           ## -->
			<!-- ## Pushes to the origin repository           ## -->
			<!-- ##                                           ## -->
			<!-- ############################################### -->
			<!-- ############################################### -->
			
				<target name="git-push-to-origin" depends="git-commit-changes">
					<trycatch>
						<try>
							<git command="push">
								<args>
									<arg value="origin" />
									<arg value="master" />
								</args>
							</git>
						</try>
						<catch>
							<echo>git [push origin master] failed</echo>	
						</catch>
					</trycatch>
				</target>
	
				<!-- Other Commands : <git command="clone"><args><arg value="git://github.com/reponame.git" /><arg value="reponame" /></args></git><git command="pull" dir="repository_path" />-->
						
		<!-- end // git commands -->
	
	
	<!-- end // utilities -->
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##                                           ## -->
	<!-- ##        Logs and logging filesystem        ## -->
	<!-- ##  (provides the file structure needed to   ## -->
	<!-- ##   maintain the logging and output)        ## -->
	<!-- ##                                           ## -->		
	<!-- ############################################### -->
	<!-- ############################################### -->
	
	
	<!-- logs -->
	
		<!-- directory -->
		<property name="log.dir" value="build_logs"/>
			
			<!-- files -->				
	
				<!-- build logs -->
						<property name="build.log.file" value="${log.dir}/tests_executed.txt"/>
					<!-- end // build logs -->
				<!-- global repository logs -->
						<property name="global.repository.log.file" value="${log.dir}/repository_transactions.txt"/>
				<!-- end // build logs -->

			<!-- end // files -->
			
			<!-- sub directories -->
				
				<!-- build specific (creates this individually for each build) -->	
					<property name="build.dir" value="${log.dir}/build_${time.stamp}" />
					
					<!-- files system -->
	
						<!-- targets executed -->
								<property name="target.log.file" value="${build.dir}/targets_executed.txt"/>	
						<!-- end // targets executed -->
						
						<!-- targets executed -->
								<property name="error.log.file" value="${build.dir}/errors.txt"/>	
						<!-- end // targets executed -->
							
						<!-- sub directories -->	
						
							<!-- tests -->
							<property name="test.dir" value="${build.dir}/tests"/>
								<!-- files -->				
									<!-- tests executed & results -->
										<property name="test.log.file" value="${test.dir}/test_transactions.txt"/>
									<!-- end // tests executed & results -->
								<!-- end // files -->
							<!-- end // tests -->
				
							<!-- repository -->
							<property name="repository.dir" value="${build.dir}/repository"/>
								<!-- files -->				
									<!-- repository transactions -->
										<property name="repository.log.file" value="${repository.dir}/repository_transactions.txt"/>
									<!-- end // repository transactions -->
								<!-- end // files -->
							<!-- end // repository -->
	
							<!-- html -->
							<property name="html.dir" value="${build.dir}/html"/>
								<!-- files -->				
									<!-- html output -->
										<property name="html.log.file" value="${html.dir}/html_output.html"/>
									<!-- end // html output  -->
								<!-- end // files -->	
							<!-- end // html -->
	
						<!-- end // sub directories -->	
							
					<!-- end // files system -->
	
				<!-- end // build specific (creates this individually for each build) -->	
			
			<!-- end // sub directories -->
		
		<!-- end // directory -->
	
	<!-- end // log -->
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##  Uses the file system variables above     ## -->
	<!-- ##  And creates the necessary structure      ## -->
	<!-- ##  to execute and log actions for automated ## -->
	<!-- ##  builds                                   ## -->	
	<!-- ############################################### -->
	<!-- ############################################### -->
	
	
	<target name="create_file_system">
		<!-- creates all directories necessary for file system -->
		
		<!-- base directory to hold all tests -->
		
		<mkdir dir="${log.dir}" />
			
			<!-- holds individual builds -->
			
			<mkdir dir="${build.dir}" />
			
			<!-- metrics being measured will be output to 
					 the following directories-->
				
				<mkdir dir="${test.dir}" />
				
				<mkdir dir="${repository.dir}" />
				
				<mkdir dir="${html.dir}" />
	</target>
	
	<!-- This will only execute once the create_file_system 
		 target has been executed and verified -->
	
	<target name="create_files" depends="create_file_system">
		
		<!-- creates all individual files within file structure -->
		
		<!-- log.dir -->
			
			<!-- logs all builds -->
			<touch file="${build.log.file}" datetime="now"/>
			
			<!-- logs all repository transactions -->
			<touch file="${global.repository.log.file}" datetime="now"/>
		
				<!-- build.dir -->
					<!-- logs all the targets executed per build -->
					<touch file="${target.log.file}" datetime="now"/>
					
					<!-- logs all the errors -->
					<touch file="${error.log.file}" datetime="now"/>
		
						<!-- test.dir -->
								<!-- logs all the targets executed per build -->
								<touch file="${target.log.file}" datetime="now"/>
						<!-- end // test.dir -->
						
						<!-- repository.dir -->
								<!-- logs all the targets executed per build -->
								<touch file="${repository.log.file}" datetime="now"/>
						<!-- end // repository.dir -->
						
						<!-- html.dir -->
								<!-- logs all the targets executed per build -->
								<touch file="${html.log.file}" datetime="now"/>
						<!-- end // html.dir -->
		
				<!-- end // build.dir -->
		<!-- end // log.dir -->
	</target>
	
	
	
	
	<!-- ############################################### -->
	<!-- ############################################### -->
	<!-- ##                                           ## -->
	<!-- ##  Write the all build metrics out to an    ## -->
	<!-- ##  html file                                ## -->
	<!-- ##                                           ## -->	
	<!-- ############################################### -->
	<!-- ############################################### -->
	
	<!-- templating example http://www.javalobby.org/articles/ant-preprocessor/ -->
	<target name="create_html_output">
		<echo file="${html.log.file}" append="false" message="
			&lt;html&gt;
				&lt;head&gt;
				&lt;/head&gt;
				&lt;body&gt;
		" />
		<echo file="${html.log.file}" append="true" message="
				&lt;h1&gt;Testing Testing 123&lt;/h1&gt;
		" />
		<echo file="${html.log.file}" append="true" message="
			&lt;/body&gt;
			&lt;/html&gt;
		" />
	</target>
	
	<!--<target name="compile" depends="create_html_output">-->	
	<!--<target name="compile" depends="create_files">-->
	<!--<target name="compile" depends="git-push-to-origin">-->
	
	
	<!-- system directories -->	
	
	<property name="src.dir" value="."/>
	<property name="broker.dir" value="${src.dir}/broker"/>		
	<property name="broker.logic.dir" value="${broker.dir}/logic"/>
	<property name="integration_testing.dir" value="${src.dir}/integration_testing"/>
	<property name="main.dir" value="${src.dir}/Main"/>
	<property name="models.dir" value="${src.dir}/models"/>
	<property name="models.analyze.dir" value="${models.dir}/analyze"/>
	<property name="models.data.dir" value="${models.dir}/data"/>
	<property name="models.data.api_adapters.dir" value="${models.data.dir}/api_adapters"/>
	<property name="models.database.dir" value="${models.dir}/database"/>
	<property name="models.database.api_adapters.dir" value="${models.database.dir}/api_adapters"/>
	<property name="models.utility.dir" value="${models.dir}/utility"/>
	<property name="strategy.dir" value="${src.dir}/strategy"/>		
	<property name="strategy.logic.dir" value="${strategy.dir}/logic"/>
	<property name="z_setup.dir" value="${src.dir}/z_setup"/>		
	<property name="optimize.setting" value="0"/>
					
	<target name="compile">
		<!--<py-compile dir="${broker.logic}" pythonpath="." optimize="0"/>-->
		<!--
		<py-run script="broker/logic/logic_tests.py" pythonpath="${src.dir}" optimize="${optimize.setting}" />
		<py-run script="broker/broker_tests.py" pythonpath="${src.dir}" optimize="${optimize.setting}" />	      	
		<py-run script="broker/broker_tests.py" pythonpath="${src.dir}" optimize="${optimize.setting}" />
		-->
		<!--
		<foreach target="individual.test" param="individual.test.file">
	       <fileset id="test.files" dir="${src.dir}">
	            <include name="**/*tests*" />
	       </fileset>
		</foreach>
		-->
		<!--
		prints out everything in a file set to the screen
		<echo message="My build-path is ${toString:test.files}" />	
		-->
	</target>

	<target name="run.all.tests" depends="compile">
		
		<foreach target="individual.test" param="individual.test.file">
	       <fileset id="test.files" dir="${src.dir}">
	            <include name="**/*tests*" />
	       </fileset>
		</foreach>
		
	</target>
	<target name="individual.test">
		<record name="log.txt" action="start"/>  	
			<py-run script="${individual.test.file}" pythonpath="${src.dir}" optimize="${optimize.setting}" />
		<record name="log.txt" action="stop"/>
	</target>
	
</project>